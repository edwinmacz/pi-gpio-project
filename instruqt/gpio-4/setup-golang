rm -f /go/src/github.com/instruqt/pi-project/main.go

tee /go/src/github.com/instruqt/pi-project/main.go > /dev/null <<"EOF"
package main

import (
	"log"
	"os"
  
	"github.com/nicholasjackson/periph-gpio-simulator/host/rpi"
	"periph.io/x/periph/host"
	"periph.io/x/periph/conn/gpio"

)

func main() {
	logger := log.New(os.Stdout, "", log.Lmicroseconds)
	logger.Println("Hello World")

	// Load all drivers:
	if _, err := host.Init(); err != nil {
		log.Fatal(err)
  }

	p15 := PinCycle{
  	Pin:     rpi.SO_51, // GPIO 15
    Running: false,
  }
  p15.Cycle() 

  // Block application exit
  select{}
}

type PinCycle struct {
  Pin     gpio.PinIO
  Running bool
}

func (f *PinCycle) Cycle() {
  go func() {
    f.Running = true
    state := gpio.High

    for f.Running {
      f.Pin.Out(state)
      time.Sleep(500 * time.Millisecond)

      // flip the state
      if state == gpio.High {
        state = gpio.Low
      } else {
        state = gpio.High
      }
    }
  }()
}

func (f *PinCycle) Stop() {
  f.Running = false
}
EOF